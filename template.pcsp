// NOTE: This will only produce probabilities of goal when the away team attacks while the home team defends
// A similar pcsp file will have to be generated from the home team POV to meaningfully compare which team has the higher chance of scoring during an attack

// Position of players in grid
// Left, LeftRight, and CenterLeft etc.
#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12;

// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// Penalty Prototype

var isPenalty = false;

// Danger level for the attacking team
// The lower the value, the lesser the danger
var danger = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley, Header, Attacking Cross, Dribble
enum {SP, LP, LS, FI, VO, HD, AC, DR};

// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position
var atkKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];
var atkDefPos = __atkDefPos__;
var atkMid1Pos = __atkMid1Pos__;
var atkMid2Pos = __atkMid2Pos__;
var atkMid3Pos = __atkMid3Pos__;
var atkForPos = __atkForPos__;
var defKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];


///////////// AWAY TEAM PLAYERS (Attacking Team) /////////////
// The parameters represent the probabilities specific to the player
// The guard only allows eligible players to get the ball, see Individual Positions section for more info

// For example keepers can only ShortPass or LongPass
// Here 64, 64 represents the FIFA ShortPass and LongPass ratings for this particular player
// Goal Keeper for AWAY -> Bradley Guzwan
__atkKepStats__


// Here for the defenders, the first 3 parameters are with respect to the ShortPass, LongPass, and prob. to lose the ball respectively
// The prob. to lose the ball for the attacking team's defenders was calculated based on the defending team forward's player ratings
// In particular, the probability to lose the ball was a weighted combination of the standing tackle, sliding tackle, and interception FIFA player ratings of the forwards
__atkDefStats__

// Similar to defenders, midfielders and forwards have their own specific parameters
// See their processes below for more information on what those parameters are
// The prob. to lose for the attacking team's midfielders is based on the defending team's midfielders
// The prob. to lose for the attacking team's forwards is based on the defending team's defenders
/* always account for worst case formation (4-1-2-1-2) */
/********************** midfield **********************/
// midfield1 -> towards the attacking goal post
// midfield2 -> towards the centre of the attacking half field
// midfield3 -> towards the striker
/******************************************************/

AtkMid1 = __atkMid1Stats__
AtkMid2 = __atkMid2Stats__
AtkMid3 = __atkMid3Stats__

__atkForStats__

/*
TO CLARIFY: Why is tackle all 59?
AtkMid players -> 0: Jordan Veretout 1: Ashley Westwood 2: Idrissa Gueye
Adding state - midfielder in forward position brings the prob back down to before
*/

///////////// HOME TEAM PLAYERS (Defending Team) /////////////
__defKepStats__

/******* game  actions *******/
Kep_1(r_shortPass, r_longPass, p) = [atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkDef
	100-r_shortPass: intercepted{danger = 7;} -> Skip
} [] [atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 || atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1]longPass -> pcase {
	r_longPass: pass -> UpdatePos(p, LP); AtkDef
	100-r_longPass: intercepted{danger = 7;} -> Skip
};

Def(r_shortPass, r_longPass, r_tackled, r_dribble, p) = [atkMid1Pos[p-2] == 1 || atkMid1Pos[p-1] == 1 || atkMid1Pos[p] == 1 || atkMid1Pos[p+1] == 1 || atkMid1Pos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkMid1
	r_dribble - r_tackled: tackled{danger = 6;} -> Skip
} [] [atkMid1Pos[p-6] == 1 || atkMid1Pos[p-5] == 1 || atkMid1Pos[p-4] == 1 || atkMid1Pos[p-3] == 1 || atkMid1Pos[p+3] == 1 || atkMid1Pos[p+4] == 1 || atkMid1Pos[p+5] == 1 || atkMid1Pos[p+6] == 1]longPass -> pcase {
	r_longPass: pass -> UpdatePos(p, LP); AtkMid1
	r_dribble - r_tackled: tackled{danger = 6;} -> Skip
} [] [atkMid2Pos[p-2] == 1 || atkMid2Pos[p-1] == 1 || atkMid2Pos[p] == 1 || atkMid2Pos[p+1] == 1 || atkMid2Pos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkMid2
	r_dribble - r_tackled: tackled{danger = 6;} -> Skip
} [] [atkMid2Pos[p-6] == 1 || atkMid2Pos[p-5] == 1 || atkMid2Pos[p-4] == 1 || atkMid2Pos[p-3] == 1 || atkMid2Pos[p+3] == 1 || atkMid2Pos[p+4] == 1 || atkMid2Pos[p+5] == 1 || atkMid2Pos[p+6] == 1]longPass -> pcase {
	r_longPass: pass -> UpdatePos(p, LP); AtkMid2
	r_dribble - r_tackled: tackled{danger = 6;} -> Skip
} [] [atkMid3Pos[p-2] == 1 || atkMid3Pos[p-1] == 1 || atkMid3Pos[p] == 1 || atkMid3Pos[p+1] == 1 || atkMid3Pos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkMid3
	r_dribble - r_tackled: tackled{danger = 6;} -> Skip
} [] [atkMid3Pos[p-6] == 1 || atkMid3Pos[p-5] == 1 || atkMid3Pos[p-4] == 1 || atkMid3Pos[p-3] == 1 || atkMid3Pos[p+3] == 1 || atkMid3Pos[p+4] == 1 || atkMid3Pos[p+5] == 1 || atkMid3Pos[p+6] == 1]longPass -> pcase {
	r_longPass: pass -> UpdatePos(p, LP); AtkMid3
	r_dribble - r_tackled: tackled{danger = 6;} -> Skip
};

Mid1(r_shortPass, r_longPass, r_longShot, r_tackled, r_cross, r_dribble, p) = [atkMid2Pos[p-2] == 1 || atkMid2Pos[p-1] == 1 || atkMid2Pos[p] == 1 || atkMid2Pos[p+1] == 1 || atkMid2Pos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkMid2
	r_dribble - r_tackled: tackled{danger = 5;} -> Skip
} [] [atkMid2Pos[p-6] == 1 || atkMid2Pos[p-5] == 1 || atkMid2Pos[p-4] == 1 || atkMid2Pos[p-3] == 1 || atkMid2Pos[p+3] == 1 || atkMid2Pos[p+4] == 1 || atkMid2Pos[p+5] == 1 || atkMid2Pos[p+6] == 1]longPass -> pcase {
	r_longPass: pass -> UpdatePos(p, LP); AtkMid2
	r_dribble - r_tackled: tackled{danger = 5;} -> Skip
} [] [atkMid3Pos[p-2] == 1 || atkMid3Pos[p-1] == 1 || atkMid3Pos[p] == 1 || atkMid3Pos[p+1] == 1 || atkMid3Pos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkMid3
	r_dribble - r_tackled: tackled{danger = 5;} -> Skip
} [] [atkMid3Pos[p-6] == 1 || atkMid3Pos[p-5] == 1 || atkMid3Pos[p-4] == 1 || atkMid3Pos[p-3] == 1 || atkMid3Pos[p+3] == 1 || atkMid3Pos[p+4] == 1 || atkMid3Pos[p+5] == 1 || atkMid3Pos[p+6] == 1]longPass -> pcase {
	r_longPass: pass -> UpdatePos(p, LP); AtkMid3
	r_dribble - r_tackled: tackled{danger = 5;} -> Skip
} [] [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkFor
	r_dribble - r_tackled: tackled{danger = 5;} -> Skip
} [] [atkForPos[p-6] == 1 || atkForPos[p-5] == 1 || atkForPos[p-4] == 1 || atkForPos[p-3] == 1 || atkForPos[p+3] == 1 || atkForPos[p+4] == 1 || atkForPos[p+5] == 1 || atkForPos[p+6] == 1]longPass -> pcase {
	r_longPass: pass{inAir = true;} -> UpdatePos(p, LP); AtkFor
	r_dribble - r_tackled: tackled{danger = 5;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	r_longShot: shoot -> UpdatePos(p, LS); DefKep
	r_dribble - r_tackled: tackled{danger = 5;} -> Skip
} [] [atkForPos[RL] == 1 || atkForPos[LR] == 1]attackCross -> pcase {
	r_cross: cross -> UpdatePos(p, AC); AtkFor
	r_dribble - r_tackled: tackled{danger = 5;} -> Skip
};

Mid2(r_shortPass, r_longPass, r_longShot, r_tackled, r_cross, r_dribble, p) = [atkMid3Pos[p-2] == 1 || atkMid3Pos[p-1] == 1 || atkMid3Pos[p] == 1 || atkMid3Pos[p+1] == 1 || atkMid3Pos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkMid3
	r_dribble - r_tackled: tackled{danger = 4;} -> Skip
} [] [atkMid3Pos[p-6] == 1 || atkMid3Pos[p-5] == 1 || atkMid3Pos[p-4] == 1 || atkMid3Pos[p-3] == 1 || atkMid3Pos[p+3] == 1 || atkMid3Pos[p+4] == 1 || atkMid3Pos[p+5] == 1 || atkMid3Pos[p+6] == 1]longPass -> pcase {
	r_longPass: pass -> UpdatePos(p, LP); AtkMid3
	r_dribble - r_tackled: tackled{danger = 4;} -> Skip
} [] [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkFor
	r_dribble - r_tackled: tackled{danger = 4;} -> Skip
} [] [atkForPos[p-6] == 1 || atkForPos[p-5] == 1 || atkForPos[p-4] == 1 || atkForPos[p-3] == 1 || atkForPos[p+3] == 1 || atkForPos[p+4] == 1 || atkForPos[p+5] == 1 || atkForPos[p+6] == 1]longPass -> pcase {
	r_longPass: pass{inAir = true;} -> UpdatePos(p, LP); AtkFor
	r_dribble - r_tackled: tackled{danger = 4;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	r_longShot: shoot -> UpdatePos(p, LS); DefKep
	r_dribble - r_tackled: tackled{danger = 4;} -> Skip
};

Mid3(r_shortPass, r_longPass, r_longShot, r_tackled, r_cross, r_dribble, p) = [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkFor
	r_dribble - r_tackled: tackled{danger = 3;} -> Skip
} [] [atkForPos[p-6] == 1 || atkForPos[p-5] == 1 || atkForPos[p-4] == 1 || atkForPos[p-3] == 1 || atkForPos[p+3] == 1 || atkForPos[p+4] == 1 || atkForPos[p+5] == 1 || atkForPos[p+6] == 1]longPass -> pcase {
	r_longPass: pass{inAir = true;} -> UpdatePos(p, LP); AtkFor
	r_dribble - r_tackled: tackled{danger = 3;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	r_longShot: shoot -> UpdatePos(p, LS); DefKep
	r_dribble - r_tackled: tackled{danger = 3;} -> Skip
};

For(r_closeShot, r_longShot, r_volley, r_header, r_tackled, r_dribble, r_shortPass, r_longPass, p) = [defKepPos[C] == 1]finish -> pcase {
	r_closeShot: shoot -> UpdatePos(p, FI); DefKep
	r_tackled: tackled{danger = 2;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	r_longShot: shoot -> UpdatePos(p, LS); DefKep
	r_tackled: tackled{danger = 2;} -> Skip
} [] [defKepPos[C] == 1 && inAir == true]volley -> pcase {
	r_volley: shoot -> UpdatePos(p, VO); DefKep
	r_tackled: tackled{danger = 2;} -> Skip
} [] [defKepPos[C] == 1 && inAir == true]header -> pcase {
	r_header: shoot -> UpdatePos(p, HD); DefKep
	r_tackled: tackled{danger = 2;} -> Skip
};

Kep_2(r_save, p) = attemptSave -> pcase {
	r_save: save{danger = 1;} -> Skip
	100-r_save: concede -> Skip
};

/****** position update ******/
UpdatePos(currPos, action) = case {
	currPos == L:
		case {
			action == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	currPos == LR:
		case {
			action == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	currPos == CL:
		case {
			action == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	currPos == C:
		case {
			action == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			action == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	currPos == CR:
		case {
			action == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			action == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	currPos == RL:
		case {
			action == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			action == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			action == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			action == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

#define Goal0 danger <= 0;
#define Goal1 danger <= 1;
#define Goal2 danger <= 2;
#define Goal3 danger <= 3;
#define Goal4 danger <= 4;
#assert AtkKep deadlockfree;
#assert AtkKep |= F G Goal0 with prob;
#assert AtkKep |= F G Goal1 with prob;
#assert AtkKep |= F G Goal2 with prob;
#assert AtkKep |= F G Goal3 with prob;
#assert AtkKep |= F G Goal4 with prob;