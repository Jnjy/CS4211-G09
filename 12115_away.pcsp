// NOTE: This will only produce probabilities of goal when the away team attacks while the home team defends 
// A similar pcsp file will have to be generated from the home team POV to meaningfully compare which team has the higher chance of scoring during an attack

// Position of players in grid
// Left, LeftRight, and CenterLeft etc.
#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12;

// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// Danger level for the attacking team
// The lower the value, the lesser the danger
var danger = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley, Header, Attacking Cross, Dribble
enum {SP, LP, LS, FI, VO, HD, AC, DR};

// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position
var atkKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];
var atkDefPos = [-1(6), 1, 0, 1, 0, 1, 0, 1, -1(6)];
var atkMidPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var atkForPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var defKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

///////////// AWAY TEAM PLAYERS (Attacking Team) /////////////
// The parameters represent the probabilities specific to the player 
// The gurad only allows eligible players to get the ball, see Individual Positions section for more info

// For example keepers can only ShortPass or LongPass
// Here 64, 64 represents the FIFA ShortPass and LongPass ratings for this particular player 
// Goal Keeper for AWAY -> Bradley Guzwan
AtkKep = [pos[C] == 1]Kep_1(64, 64, C); // This (64, 64) is probably from gk_kicking ?


// Here for the defenders, the first 3 parameters are with respect to the ShortPass, LongPass, and prob. to lose the ball respectively 
// The prob. to lose the ball for the attacking team's defenders was calculated based on the defending team forward's player ratings 
// In particular, the probability to lose the ball was a weighted combination of the standing tackle, sliding tackle, and interception FIFA player ratings of the forwards
AtkDef = [pos[R] == 1]Def(73, 71, 38, 82, R) [] [pos[CR] == 1]Def(68, 63, 38, 82, CR) [] [pos[CL] == 1]Def(68, 63, 38, 82, CL) [] [pos[L] == 1]Def(72, 59, 38, 82, L);

// Similar to defenders, midfielders and forwards have their own specific parameters
// See their processes below for more information on what those parameters are
// The prob. to lose for the attacking team's midfielders is based on the defending team's midfielders
// The prob. to lose for the attacking team's forwards is based on the defending team's defenders

AtkMid = [pos[RL] == 1]Mid(79, 76, 74, 59, 73, 79, RL) [] [pos[C] == 1]Mid(83, 80, 57, 59, 82, 79, C) [] [pos[LR] == 1]Mid(78, 73, 75, 59, 59, 79,LR); // HC: Added fake ratings for m here in Mid() process TODO: use legit rating and test
// For() takes in r_closeShot, r_longShot, r_volley, r_header, r_tackled, r_dribble
AtkFor = [pos[RL] == 1]For(77, 75, 74, 77, 75, 90, 85, 85, RL) [] [pos[C] == 1]For(75, 73, 66, 76, 75, 90, 85, 85, C) [] [pos[LR] == 1]For(73, 65, 65, 69, 75, 90, 85, 85, LR);
AtkForMidField = [pos[R] == 1 || pos[CR] == 1]Mid(79, 76, 74, 59, 73, 79, RL) [] [pos[CL] == 1 || pos[CR] == 1]Mid(83, 80, 57, 59, 82, 79, C) [] [pos[L] == 1 || pos[CL] == 1]Mid(78, 73, 75, 59, 59, 79,LR);

/*
TO CLARIFY: Why is tackle all 59?
AtkMid players -> 0: Jordan Veretout 1: Ashley Westwood 2: Idrissa Gueye
Adding state - midfielder in forward position brings the prob back down to before
*/

///////////// HOME TEAM PLAYERS (Defending Team) /////////////
// Home team defenders, midfielders and forwards are already implicitly "defending" via the prob. to lose the ball parameter
// HOME Goal Keeper -> Artur Boruc
DefKep = [pos[C] == 1]Kep_2(72, C); // This is from gk_handling

///////////// Individual Positions /////////////
// There is a guard to every action (e.g., shortPass) a player can take
// The guard makes sure that there are players eligible to receive the ball should that action happen
// Furthermore, based on the type of action taken, only some players will be eligible to receive the ball
// E.g., If a defender at L does a shortPass, the midfielder at R should not be able to receive it
// The eligible players are updated with UpdatePos

// HC: Prob dont need this at all
// Guard attack cross: attack cross done between forwards players. Hence the guard states (are similar to attforPos in Mid() process? Someone please check) 
//Cross(i, p) = [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]attackCross -> pcase {
//	i: cross -> UpdatePos(p, AC); AtkFor
//	100-i: tackled{danger = 2;} -> Skip
//};

Kep_1(r_shortPass, r_longPass, p) = [atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkDef
	100-r_shortPass: intercepted{danger = 5;} -> Skip
} [] [atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 || atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1]longPass -> pcase {
	r_longPass: pass -> UpdatePos(p, LP); AtkDef
	100-r_longPass: intercepted{danger = 5;} -> Skip
};

Def(r_shortPass, r_longPass, r_tackled, r_dribble, p) = [atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkMid
	r_dribble - r_tackled: tackled{danger = 4;} -> Skip
} [] [atkMidPos[p-6] == 1 || atkMidPos[p-5] == 1 || atkMidPos[p-4] == 1 || atkMidPos[p-3] == 1 || atkMidPos[p+3] == 1 || atkMidPos[p+4] == 1 || atkMidPos[p+5] == 1 || atkMidPos[p+6] == 1]longPass -> pcase {
	r_longPass: pass -> UpdatePos(p, LP); AtkMid
	r_dribble - r_tackled: tackled{danger = 4;} -> Skip
};


Mid(r_shortPass, r_longPass, r_longShot, r_tackled, r_cross, r_dribble, p) = [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkFor
	r_dribble - r_tackled: tackled{danger = 3;} -> Skip
} [] [atkForPos[p-6] == 1 || atkForPos[p-5] == 1 || atkForPos[p-4] == 1 || atkForPos[p-3] == 1 || atkForPos[p+3] == 1 || atkForPos[p+4] == 1 || atkForPos[p+5] == 1 || atkForPos[p+6] == 1]longPass -> pcase {
	r_longPass: pass{inAir = true;} -> UpdatePos(p, LP); AtkFor
	r_dribble - r_tackled: tackled{danger = 3;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	r_longShot: shoot -> UpdatePos(p, LS); DefKep
	r_dribble - r_tackled: tackled{danger = 3;} -> Skip
} [] [atkForPos[RL] == 1 || atkForPos[LR] == 1]attackCross -> pcase { // changed, discuss see if correct
	r_cross: cross -> UpdatePos(p, AC); AtkFor // cross -> Attack forwards. // TODO: UpdatePos process for cross
	r_dribble - r_tackled: tackled{danger = 3;} -> Skip
} [] [defKepPos[C] == 1]dribbleThrough -> pcase {
	r_dribble: dribble -> UpdatePos(p, DR); AtkForMidField
	r_tackled: tackled{danger = 3;} -> Skip
} [] [atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1]shortPass -> pcase {
	r_shortPass: shortPassBack -> UpdatePos(p, SP); AtkDef
	r_dribble - r_tackled: intercepted{danger = 3;} -> Skip
} [] [atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 || atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1]longPass -> pcase {
	r_longPass: longPassBack -> UpdatePos(p, LP); AtkDef
	r_dribble - r_tackled: intercepted{danger = 3;} -> Skip
};

For(r_closeShot, r_longShot, r_volley, r_header, r_tackled, r_dribble, r_shortPass, r_longPass, p) = [defKepPos[C] == 1]finish -> pcase {
	r_closeShot: shoot -> UpdatePos(p, FI); DefKep
	r_dribble - r_tackled: tackled{danger = 2;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	r_longShot: shoot -> UpdatePos(p, LS); DefKep
	r_dribble - r_tackled: tackled{danger = 2;} -> Skip
} [] [defKepPos[C] == 1 && inAir == true]volley -> pcase {
	r_volley: shoot -> UpdatePos(p, VO); DefKep
	r_dribble - r_tackled: tackled{danger = 2;} -> Skip
} [] [defKepPos[C] == 1 && inAir == true]header -> pcase {
	r_header: shoot -> UpdatePos(p, HD); DefKep
	r_dribble - r_tackled: tackled{danger = 2;} -> Skip
} [] [atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1]shortPass -> pcase {
	r_shortPass: pass -> UpdatePos(p, SP); AtkMid
	r_dribble - r_tackled: tackled{danger = 2;} -> Skip
} [] [atkMidPos[p-6] == 1 || atkMidPos[p-5] == 1 || atkMidPos[p-4] == 1 || atkMidPos[p-3] == 1 || atkMidPos[p+3] == 1 || atkMidPos[p+4] == 1 || atkMidPos[p+5] == 1 || atkMidPos[p+6] == 1]longPass -> pcase {
	r_longPass: pass -> UpdatePos(p, LP); AtkMid
	r_dribble - r_tackled: tackled{danger = 2;} -> Skip
};

// Penalty can be modelled here, we can use some other metrics to justify a foul probability.
Kep_2(r_save, p) = attemptSave -> pcase {
	r_save: save{danger = 1;} -> Skip
	100-r_save: concede -> Skip
};

// Pos is the grid of eligible positions that can receive the ball
// Let's say shoot -> UpdatePos(p, VO); DefKep, the pos[] of possible position to recevie when we go back to DefKep (Line 65) will be the newly updated pos[].
UpdatePos(currPos, action) = case {
	currPos == L: 
		case {
			action == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			action == LS: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == DR: {pos[L] = 0; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == AC: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	currPos == LR:
		case {
			action == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			action == LS: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == DR: {pos[L] = 1; pos[LR] = 0; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	currPos == CL: 
		case {
			action == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			action == LS: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == DR: {pos[L] = 0; pos[LR] = 1; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	currPos == C:
		case {
			action == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			action == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			action == LS: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == DR: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 0; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}	
	currPos == CR:
		case {
			action == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			action == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == LS: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == DR: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 1; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	currPos == RL:
		case {
			action == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			action == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == LS: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == DR: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 0; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			action == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			action == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == LS: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == DR: {pos[L] = 0; pos[LR] = 1; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			action == AC: {pos[L] = 0; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip

			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

#define Goal0 danger <= 0;
#define Goal1 danger <= 1;
#define Goal2 danger <= 2;
#define Goal3 danger <= 3;
#define Goal4 danger <= 4;
#assert AtkKep deadlockfree;
#assert AtkKep |= F G Goal0 with prob;
#assert AtkKep |= F G Goal1 with prob;
#assert AtkKep |= F G Goal2 with prob;
#assert AtkKep |= F G Goal3 with prob;
#assert AtkKep |= F G Goal4 with prob;

/*
Things to take note of:
- possible to add player speed into weight of tackle
- gk ratings (diving, handling, kicking, reflexes or positioning into weight of def2keep)
- dribbling can be combined weigths of skill_dribbling and skill_ball_control

improvements after presentation
- script + backward movements

* ask TA if there is a requirement to model backwards
*/

/*
Results (Initial):
The Assertion (AtkKep() |= F G Goal0 with prob) is Valid with Probability [0.02849, 0.06565];
The Assertion (AtkKep() |= F G Goal1 with prob) is Valid with Probability [0.10175, 0.23446];
The Assertion (AtkKep() |= F G Goal2 with prob) is Valid with Probability [0.19128, 0.24367];
The Assertion (AtkKep() |= F G Goal3 with prob) is Valid with Probability [0.38928, 0.4209];
The Assertion (AtkKep() |= F G Goal4 with prob) is Valid with Probability [0.64, 0.64];

Results (New Actions):
[#1: Attack Cross] 
OLD -> The Assertion (AtkKep() |= F G Goal0 with prob) is Valid with Probability [0.00779, 0.06565]; VS NEW -> The Assertion (AtkKep() |= F G Goal0 with prob) is Valid with Probability [0.02757, 0.24095];
OLD -> The Assertion (AtkKep() |= F G Goal1 with prob) is Valid with Probability [0.02783, 0.23446]; VS NEW -> The Assertion (AtkKep() |= F G Goal1 with prob) is Valid with Probability [0.09845, 0.24095];

[#2: Dribble + Tackle]
The Assertion (AtkKep() |= F G Goal0 with prob) is Valid with Probability [0.06537, 0.08802];
The Assertion (AtkKep() |= F G Goal1 with prob) is Valid with Probability [0.23345, 0.31436];
The Assertion (AtkKep() |= F G Goal2 with prob) is Valid with Probability [0.27138, 0.31865];
The Assertion (AtkKep() |= F G Goal3 with prob) is Valid with Probability [0.3666, 0.39932];
The Assertion (AtkKep() |= F G Goal4 with prob) is Valid with Probability [0.64, 0.64];
*/